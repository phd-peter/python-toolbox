---
description: 
globs: 
alwaysApply: false
---
# Python Toolbox 프로젝트 규칙

## 📋 프로젝트 목적
이 프로젝트는 파이썬 코딩 시 재사용 가능한 유용한 코드 스니펫들을 폴더별로 정리한 toolbox입니다. 각 폴더는 다른 프로젝트에서 복사하여 즉시 사용할 수 있도록 완결성을 갖추어야 합니다.

## 🏗️ 폴더 구조 원칙

### 1. 폴더별 독립성
각 폴더는 완전히 독립적으로 작동해야 하며, 다른 폴더에 의존하지 않아야 합니다.

```
python-toolbox/
├── folder-name/
│   ├── requirements.txt    # 필수: 해당 폴더의 모든 의존성
│   ├── README.md          # 필수: 사용법 및 설명
│   ├── core.py           # 핵심 기능 코드
│   ├── example.py        # 사용 예제
│   └── .env.template     # 환경변수 필요시
```

### 2. 필수 파일들

#### requirements.txt
- 해당 폴더에서 사용하는 모든 외부 라이브러리를 명시
- 버전을 고정하여 호환성 보장
```txt
openai==1.0.0
python-dotenv==1.0.0
pandas>=1.5.0
```

#### README.md
다음 섹션들을 포함해야 함:
- **기능 설명**: 이 폴더가 제공하는 기능
- **설치 방법**: `pip install -r requirements.txt`
- **사용법**: 간단한 코드 예제
- **주요 함수/클래스**: API 문서화
- **의존성**: 필요한 환경변수나 설정

#### core.py
- 재사용 가능한 핵심 함수/클래스들
- 잘 문서화된 docstring
- 타입 힌트 사용 권장

#### example.py
- core.py의 함수들을 사용하는 실제 예제
- 바로 실행 가능한 형태
- 주석으로 상세한 설명

## 📝 코딩 규칙

### 1. 함수 작성 규칙
```python
def function_name(param: type) -> return_type:
    """
    함수의 목적과 기능을 명확히 설명
    
    Args:
        param (type): 매개변수 설명
        
    Returns:
        return_type: 반환값 설명
        
    Example:
        >>> result = function_name("test")
        >>> print(result)
        "Expected output"
    """
    # 구현 코드
    pass
```

### 2. 에러 처리
- 모든 외부 API 호출에는 try-except 블록 사용
- 명확한 에러 메시지 제공
- 필요한 경우 로깅 구현

### 3. 환경변수 관리
- API 키나 민감한 정보는 .env 파일 사용
- .env.template 파일로 필요한 환경변수 명시
- python-dotenv 사용 권장

## 🔄 사용 워크플로우

### 새 프로젝트에서 사용법
1. 필요한 폴더를 새 프로젝트로 복사
```bash
cp -r python-toolbox/folder-name ./my-project/
```

2. 가상환경 설정 및 의존성 설치
```bash
cd my-project/folder-name
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate
pip install -r requirements.txt
```

3. 환경변수 설정 (필요한 경우)
```bash
cp .env.template .env
# .env 파일 편집하여 실제 값 입력
```

4. 바로 사용 가능

## 📂 폴더 명명 규칙
- 소문자와 하이픈 사용: `api-helper`, `data-processing`
- 기능이나 용도를 명확히 표현
- 너무 길지 않게 (20자 이내)

## 🧪 테스트 권장사항
- 각 폴더에 `test_core.py` 파일 추가 권장
- pytest 사용 권장
- 주요 함수들에 대한 단위 테스트 작성

## 🔧 유지보수 원칙
- 각 폴더는 독립적으로 업데이트 가능
- 의존성 업데이트 시 requirements.txt 수정
- README.md는 항상 최신 상태 유지
- 예제 코드는 실제로 동작하는지 주기적 확인

## ⚠️ 주의사항
- 절대 경로 대신 상대 경로 사용
- 프로젝트 루트에 의존하는 코드 작성 금지
- 다른 폴더의 코드를 import하지 말 것
- 공통 requirements.txt 사용하지 말 것


